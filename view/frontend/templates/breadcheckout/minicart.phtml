<?php /** @var Bread\BreadCheckout\Block\Checkout\Overview $block */ ?>
<?= /* @noEscape */ $block->getBeforeHtml(); ?>
<div id="bread-btn-cntnr-minicart">
    <div id="bread-checkout-btn-minicart" title="Bread Checkout" class="button" <?= /* @noEscape */ $block->getIsDefaultSize(); ?>>
    </div>
    <div class="button-prevent" id="button-prevent">
        <span class="buy_error_tip override_tip" data-content="<?= /* @noEscape */ $block->productTypeErrorMessage() ?>">&nbsp;</span>
    </div>
</div>

<script type="text/javascript">
    <?php if ($block->getApiVersion() === 'bread_2') : ?>
    require(['jquery'], function($) {
        let wasSetup = false;
        document.configureButton = function (items) {
            if (typeof window.BreadPayments !== 'undefined' || typeof window.RBCPayPlan !== 'undefined') {
                var currentCurrencyCode = "<?= /* @noEscape */ $block->getCurrentCurrencyCode(); ?>";
                var configClient = "<?= /* @noEscape */ $block->getConfigClient(); ?>";
                var breadSdk = null;
                if (configClient === 'RBC') {
                    breadSdk = window.RBCPayPlan;
                } else {
                    breadSdk = window.BreadPayments;
                }
                var total = 0;
                var itemsObject = [];
                for(var i = 0; i < items.length; i++) {
                    total += items[i]['price'] * items[i]['quantity'];
                    var item = {
                                name: items[i].name,
                                quantity: items[i].quantity,
                                shippingCost: {
                                    value: 0,
                                    currency: currentCurrencyCode
                                },
                                shippingDescription: '',
                                unitTax: {
                                    value: 0,
                                    currency: currentCurrencyCode
                                },
                                unitPrice: {
                                    currency: currentCurrencyCode,
                                    value: items[i].price
                                },
                                itemUrl: items[i].detailUrl
                            };

                            itemsObject.push(item);
                }
                var placementObject = {
                    allowCheckout: false,
                    domID: 'bread-checkout-btn-minicart',
                    order: {
                        currency: currentCurrencyCode,
                        items: itemsObject,
                        subTotal: {
                            value: total,
                            currency: currentCurrencyCode
                        },
                        totalPrice: {
                            value: total,
                            currency: currentCurrencyCode
                        },
                        totalDiscounts: {
                            value: 0,
                            currency: currentCurrencyCode
                        },
                        totalShipping: {
                            value: 0,
                            currency: currentCurrencyCode
                        },
                        totalTax: {
                            value: 0,
                            currency: currentCurrencyCode
                        }
                    }
                };
                breadSdk.placements.push(placementObject);
                breadSdk.init();
            }
            
        };
        
        $(window).on('load', function() {
            var minicartItems       = <?= /* @noEscape */ $block->getProductDataJson(); ?>;
            document.configureButton(minicartItems);
        });
    });    
    <?php else: ?>    
    require(['jquery', 'jquery/validate', 'mage/validation'], function($){

        var validateProductTypes = Boolean(<?= /* @noEscape */ $block->validateAllowedProductTypes() ?>);
        if(validateProductTypes === false){
            var buttonPrevent = $('#button-prevent');
            buttonPrevent.css('width','100%');
            buttonPrevent.css('height','100%');
            buttonPrevent.show();
        }

        document.configureButton = function (items) {
            var address             = <?= /* @noEscape */ $block->getShippingAddressData(); ?>;
            var billingAddress      = <?= /* @noEscape */ $block->getBillingAddressData(); ?>;
            var buttonOnProduct     = <?= /* @noEscape */ $block->getIsButtonOnProduct(); ?>;
            var buttonCss           = '<?= /* @noEscape */ $block->getButtonDesign(); ?>';
            var financingInfo         = <?= /* @noEscape */ $block->getFinancingJson(); ?>;
            var total = 0;
            for(var i = 0; i < items.length; i++){
                total += items[i]['price'] * items[i]['quantity'];
            }

            var breadConfig = {
                buttonId: "bread-checkout-btn-minicart",
                allowSplitPayCheckout: false,
                asLowAs: <?= /* @noEscape */ $block->getAsLowAs(); ?>,
                actAsLabel: false,
                <?php if (!$block->isHealthcare()) : ?>
                items: items,
                <?php else : ?>
                customTotal: total,
                <?php endif; ?>
                allowCheckout: <?= /* @noEscape */ $block->getAllowCheckout(); ?>,
                buttonLocation: '<?= /* @noEscape */ $block->getCartSummaryLocation(); ?>',

                done: function (err, tx_token) {
                    if (tx_token !== undefined) {
                        var i = document.createElement('input');
                        var k = document.createElement('input');
                        i.type = 'hidden';
                        i.name = 'token';
                        i.value = tx_token;
                        k.type = 'hidden';
                        k.name = 'form_key';
                        k.value = $.cookie('form_key');
                        var f = document.createElement('form');
                        f.action = '<?= /* @noEscape */ $block->getValidateOrderUrl(); ?>';
                        f.method = 'POST';
                        f.appendChild(i);
                        f.appendChild(k);
                        document.body.appendChild(f);
                        f.submit();
                    } else {
                        var errorInfo = {
                            bread_config: breadConfig,
                            err: err
                        };
                        document.logBreadIssue('error', errorInfo, 'tx_token undefined in done callback');
                    }
                },

                /**
                 * Calculate tax value callback
                 *
                 * @param shippingAddress
                 * @param callback
                 */
                calculateTax: function (shippingAddress, callback) {
                    shippingAddress.block_key        = '<?= /* @noEscape */ $block->getBlockCode(); ?>';
                    shippingAddress.additional_data  = <?= /* @noEscape */ $block->jsonEncode($block->setAdditionalData()); ?>;

                    var taxEstimationUrl = '<?= /* @noEscape */ $block->getTaxEstimationUrl(); ?>';
                    var shippingString = JSON.stringify(shippingAddress);
                    var errorInfo;

                    $.ajax({
                        url: taxEstimationUrl,
                        data: { shippingInfo: shippingString },
                        type: 'post'
                    }).done(function (response) {
                        try {
                            errorInfo = {
                                response: response,
                                shipping_info: shippingString,
                            };
                            if (response !== null && typeof response === 'object') {
                                if (response.error) {
                                    document.logBreadIssue('error', errorInfo, 'Error estimating tax');
                                    alert(response.message);
                                } else {
                                    callback(null, response.result);
                                }
                            } else {
                                document.logBreadIssue('error', errorInfo, 'Response from ' + taxEstimationUrl + ' was not of type Object');
                            }
                        }
                        catch (e) {
                            errorInfo = {
                                response: response,
                                shipping_info: shippingString,
                            };
                            document.logBreadIssue('error', errorInfo, e);
                        }
                    }).fail(function(error) {
                        errorInfo = {
                            shipping_info: shippingString,
                        };
                        document.logBreadIssue('error', errorInfo,
                            'Error code returned when calling ' + taxEstimationUrl + ', with status: ' + error.statusText);
                    });
                },

                /**
                 * Calculate shipping cost callback
                 *
                 * @param shippingAddress
                 * @param callback
                 */
                calculateShipping: function (shippingAddress, callback) {
                    shippingAddress.block_key        = '<?= /* @noEscape */ $block->getBlockCode(); ?>';
                    shippingAddress.additional_data  = <?= /* @noEscape */ $block->jsonEncode($block->setAdditionalData()); ?>;

                    var shippingAddressEstimationUrl = '<?= /* @noEscape */ $block->getShippingAddressEstimationUrl(); ?>';
                    var errorInfo;

                    $.ajax({
                        url: shippingAddressEstimationUrl,
                        data: shippingAddress,
                        type: 'post'
                    }).done(function (response) {
                        try {
                            errorInfo = {
                                response: response,
                                shipping_info: shippingAddress,
                            };
                            if (response !== null && typeof response === 'object') {
                                if (response.error) {
                                    document.logBreadIssue('error', errorInfo, 'Error calculating shipping');
                                    alert(response.message);
                                } else {
                                    callback(null, response.result);
                                }
                            } else {
                                document.logBreadIssue('error', errorInfo, 'Response from ' + shippingAddressEstimationUrl + ' was not of type Object');
                            }
                        }
                        catch (e) {
                            errorInfo = {
                                response: response,
                                shipping_info: shippingAddress,
                            };
                            document.logBreadIssue('error', errorInfo, e);
                        }
                    }).fail(function(error) {
                        errorInfo = {
                            shipping_info: shippingAddress,
                        };
                        document.logBreadIssue('error', errorInfo,
                            'Error code returned when calling ' + shippingAddressEstimationUrl + ', with status: ' + error.statusText);
                    });
                }
            };

            if (buttonCss !== null && buttonCss !== '' && buttonCss != false) {
                breadConfig.customCSS = buttonCss;
            }

            if (address !== false) {
                breadConfig.shippingContact = address;
            }

            if (billingAddress !== false) {
                breadConfig.billingContact = billingAddress;
            }

            if (buttonOnProduct === true) {
                breadConfig.actAsLabel = false;
            }

            var targetedFinancingStatus = <?= /* @noEscape */ $block->getTargetedFinancingStatusJson(); ?>;

            if (targetedFinancingStatus.shouldUseFinancingId) {
                breadConfig.financingProgramId = targetedFinancingStatus.id;
            }

            var discountAmount = <?= /* @noEscape */ json_encode($block->quoteHelper->getDiscountData());?>;
            if (discountAmount.length > 0) {
                breadConfig.discounts = [{
                    amount: discountAmount[0].amount,
                    description: (discountAmount[0].description !== null) ?
                        discountAmount[0].description :
                        "Discount"
                }];
            }
            if (typeof bread !== 'undefined') {
                bread.checkout(breadConfig);
            }
        };

        document.round = function(value) {
            return parseInt(Math.round(value * 100));
        };

        $(window).on('load', function() {
            var minicartItems       = <?= /* @noEscape */ $block->getProductDataJson(); ?>;
            document.configureButton(minicartItems);
        });
    });
    //# sourceURL=bread-minicart.js
    <?php endif; ?>
</script>
