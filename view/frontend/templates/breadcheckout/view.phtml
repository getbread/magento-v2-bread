<?php /** @var $block Bread\BreadCheckout\Block\Product\View */ ?>
<?= /* @noEscape */ $block->getBeforeHtml(); ?>

<div id="bread-btn-cntnr">
    <div id="bread-checkout-btn" title="Bread Checkout" class="button" <?= /* @noEscape */ $block->getIsDefaultSize(); ?>>
        <?php if($block->getApiVersion() !== 'bread_2' ) :?>
        <span>
            <span><img src="<?= /* @noEscape */ $block->getViewFileUrl('Bread_BreadCheckout/bread/images/ajax-loader-small.gif'); ?>" alt="<?= /* @noEscape */ __('Bread Checkout'); ?>" /></span>
        </span>
        <?php endif; ?>
    </div>
    <div class="button-prevent" id="button-prevent">
        <span class="buy_error_tip override_tip" data-content="<?= /* @noEscape */ __('Please complete product configuration') ?>">&nbsp;</span>
    </div>
    <div class="splitpay-clickable-button" style="text-align: center;"></div>
</div>

<script type="text/x-magento-init">
    {
        "*": {
             "Bread_BreadCheckout/js/product/button": {
                "buttonId": "#bread-checkout-btn, #button-prevent",
                "requiredOptionsSelector": ".product-options-wrapper [aria-required=\"true\"]"
             }
        }
    }
</script>

<?php if($block->getApiVersion() === 'bread_2') :?> 
<script type="text/javascript">
        require(['jquery'], function($) {
            
        document.configureButton = function (items) {          
            if (typeof window.BreadPayments !== 'undefined' || typeof window.RBCPayPlan !== 'undefined') {
                    let bread_sdk = null;
                    let config_client = "<?= /* @noEscape */ $block->getConfigClient(); ?>";
                    if (config_client === 'RBC') {
                        bread_sdk = window.RBCPayPlan;
                    } else {
                        bread_sdk = window.BreadPayments;
                    }
                    let onApproved = function onApproved(application) {};
                    let onCheckout = function onCheckout(application) {};
                    bread_sdk.setup({
                        integrationKey: "<?= /* @noEscape */ $block->getIntegrationKey(); ?>"
                    });
                    bread_sdk.on('INSTALLMENT:APPLICATION_DECISIONED', onApproved);
                    bread_sdk.on('INSTALLMENT:APPLICATION_CHECKOUT', onCheckout);
                    let currentCurrencyCode = "<?= /* @noEscape */ $block->getCurrentCurrencyCode(); ?>";
                    let itemsObject = [];
                    for (var i = 0; i < items.length; i++) {
                        let item = {
                            name: items[i].name,
                            quantity: items[i].quantity,
                            shippingCost: {
                                value: 0,
                                currency: currentCurrencyCode
                            },
                            shippingDescription: '',
                            unitTax: {
                                value: 0,
                                currency: currentCurrencyCode
                            },
                            unitPrice: {
                                currency: currentCurrencyCode,
                                value: items[i].price
                            },
                            itemUrl: items[i].detailUrl
                        };

                        itemsObject.push(item);
                    }
                    bread_sdk.registerPlacements([{
                        allowCheckout: false,
                        domID: 'bread-checkout-btn',
                        order: {
                            currency: currentCurrencyCode,
                            items: itemsObject,
                            subTotal: {
                                value: items[0]["price"],
                                currency: currentCurrencyCode
                            },
                            totalPrice: {
                                value: items[0]["price"],
                                currency: currentCurrencyCode
                            },
                            totalDiscounts: {
                                value: 0,
                                currency: currentCurrencyCode
                            },
                            totalShipping: {
                                value: 0,
                                currency: currentCurrencyCode
                            },
                            totalTax: {
                                value: 0,
                                currency: currentCurrencyCode
                            }
                        }
                    }]);

                    bread_sdk.setInitMode('manual');
                    bread_sdk.init();


                } else {
                    let errorInfo = {
                        err: 'err'
                    };
                    document.logBreadIssue('error', errorInfo, 'Instance of Bread Payments SDK does not exist');
                }
        };    
            
        <?php if ($block->getProduct() != null) : ?>

        /**
         * Reconfigure Bread checkout button with updated
         * price and sku values
         */
        document.resetPriceAndSku = function(configurable) {
            if (!configurable) {
                document.configureButton(document.defaultItems);
            }
            else {
                var price = document.calculatePrice();

                if(typeof document.customOptions !== "undefined"){
                    sku = document.selectedSku + document.customOptions;
                } else {
                    sku = document.selectedSku;
                }

                if (sku != document.previousSku || price != document.previousPrice) {
                    document.previousSku                    = sku;
                    document.previousPrice                  = price;
                    document.defaultItems[0]["sku"]         = document.previousSku;
                    document.defaultItems[0]["price"]       = document.previousPrice;
                    document.configureButton(document.defaultItems);
                }
            }
        };    
            /**
         * Calculate updated price based on attribute selections
         * and/or custom options
         *
         * @returns int
         */
        document.calculatePrice = function() {
            var price = 0;
            var customPrice = 0;

            if (document.priceWithOptions) {
                customPrice = document.priceWithOptions;
            }

            var selectedProductPrices = (typeof spConfig !== "undefined") && spConfig.optionPrices[document.selectedSimpleProductId];

            if (selectedProductPrices) {
                price = parseInt(Math.round(selectedProductPrices.finalPrice.amount * 100));
            }

            return Math.max(price, customPrice);
        };
        <?php endif; ?>
        document.defaultItems       = <?= /* @noEscape */ $block->getProductDataJson(); ?>;
        document.previousPrice      = document.defaultItems[0]["price"];
        document.previousSku        = document.defaultItems[0]["sku"];

        $(document).ready(function () {
            <?php if ($block->getProduct() != null) : ?>
                document.productId                      = '<?= /* @noEscape */ $block->getProduct()->getId(); ?>';
                document.baseProductSku                 = '<?= /* @noEscape */ $block->getProduct()->getSku(); ?>';
                document.selectedSku                    = '<?= /* @noEscape */ $block->getProduct()->getSku(); ?>';
                document.selectedSimpleProductId        = '<?= /* @noEscape */ $block->getProduct()->getId(); ?>';
                document.resetPriceAndSku(false);
            <?php else : ?>
                document.configureButton(document.defaultItems);
            <?php endif; ?>
        });
        });
</script>
<?php else : ?>
<script type="text/javascript">    
    require(['jquery', 'splitPay'], function($, splitPay) {

        document.configureButton = function (items) {
            var buttonOnProduct     = <?= /* @noEscape */ $block->getIsButtonOnProduct(); ?>;
            var buttonCss           = '<?= /* @noEscape */ $block->getButtonDesign(); ?>';
            var financingInfo   = <?= /* @noEscape */ $block->getFinancingJson(); ?>;
            var breadConfig = {
                buttonId: "bread-checkout-btn",
                allowSplitPayCheckout: false,
                asLowAs: <?= /* @noEscape */ $block->getAsLowAs(); ?>,
                <?php if (!$block->isHealthcare()) : ?>
                items: items,
                <?php else : ?>
                customTotal: items[0]['price'],
                <?php endif; ?>
                discounts: <?= /* @noEscape */ $block->getDiscountDataJson(); ?>,
                allowCheckout: <?= /* @noEscape */ $block->getAllowCheckout(); ?>,
                done: function (err, tx_token) {
                    if (tx_token !== undefined) {
                        var i = document.createElement('input');
                        var k = document.createElement('input');
                        i.type = 'hidden';
                        i.name = 'token';
                        i.value = tx_token;
                        k.type = 'hidden';
                        k.name = 'form_key';
                        k.value = $.cookie('form_key');
                        var f = document.createElement('form');
                        f.action = '<?= /* @noEscape */ $block->getValidateOrderUrl(); ?>?product_page=1';
                        f.method = 'POST';
                        f.appendChild(i);
                        f.appendChild(k);
                        document.body.appendChild(f);
                        f.submit();
                    } else {
                        var errorInfo = {
                            bread_config: breadConfig,
                            err: err
                        };
                        document.logBreadIssue('error', errorInfo, 'tx_token undefined in done callback');
                    }
                },

                /**
                 * Calculate tax value callback
                 *
                 * @param shippingAddress
                 * @param callback
                 */
                calculateTax: function (shippingAddress, callback) {
                    var productForm = $('#product_addtocart_form');
                    var errorInfo;

                    shippingAddress.block_key                       = '<?= /* @noEscape */ $block->getBlockCode(); ?>';
                    shippingAddress.additional_data                 = <?= /* @noEscape */ $block->jsonEncode($block->setAdditionalData()); ?>;
                    shippingAddress.selected_sku                    = document.selectedSku + document.customOptions;
                    shippingAddress.selected_simple_product_id      = document.selectedSimpleProductId;
                    shippingAddress.main_product_id                 = document.productId;
                    shippingAddress.buy_request                     = productForm.serialize();

                    var taxEstimationUrl = '<?= /* @noEscape */ $block->getTaxEstimationUrl(); ?>';
                    var shippingString = JSON.stringify(shippingAddress);

                    $.ajax({
                        url: taxEstimationUrl,
                        data: { shippingInfo: shippingString },
                        type: 'post'
                    }).done(function(response) {
                        try {
                            errorInfo = {
                                response: response,
                                shipping_info: shippingString,
                            };
                            if (response !== null && typeof response === 'object') {
                                if (response.error) {
                                    document.logBreadIssue('error', errorInfo, 'Error estimating tax');
                                    alert('Internal Error');
                                } else {
                                    callback(null, response.result);
                                }
                            } else {
                                document.logBreadIssue('error', errorInfo, 'Response from ' + taxEstimationUrl + ' was not of type Object');
                            }
                        }
                        catch (e) {
                            errorInfo = {
                                response: response,
                                shipping_info: shippingString,
                            };
                            document.logBreadIssue('error', errorInfo, e);
                        }
                    }).fail(function(error) {
                        errorInfo = {
                            shipping_info: shippingString,
                        };
                        document.logBreadIssue('error', errorInfo,
                            'Error code returned when calling ' + taxEstimationUrl + ', with status: ' + error.statusText);
                    });
                },

                /**
                 * Calculate shipping cost callback
                 *
                 * @param shippingAddress
                 * @param callback
                 */
                calculateShipping: function (shippingAddress, callback) {
                    var productForm = $('#product_addtocart_form');
                    var errorInfo;

                    shippingAddress.block_key                       = '<?= /* @noEscape */ $block->getBlockCode(); ?>';
                    shippingAddress.additional_data                 = <?= /* @noEscape */ $block->jsonEncode($block->setAdditionalData()); ?>;
                    shippingAddress.selected_sku                    = document.selectedSku + document.customOptions;
                    shippingAddress.selected_simple_product_id      = document.selectedSimpleProductId;
                    shippingAddress.main_product_id                 = document.productId;
                    shippingAddress.buy_request                     = productForm.serialize();

                    var shippingAddressEstimationUrl = '<?= /* @noEscape */ $block->getShippingAddressEstimationUrl(); ?>';
                    $.ajax({
                        url: shippingAddressEstimationUrl,
                        data: shippingAddress,
                        type: 'post'
                    }).done(function (response) {
                        try {
                            errorInfo = {
                                response: response,
                                shipping_info: shippingAddress,
                            };
                            if (response !== null && typeof response === 'object') {
                                if (response.error) {
                                    document.logBreadIssue('error', errorInfo, 'Error calculating shipping');
                                    alert('Internal Error');
                                } else {
                                    callback(null, response.result);
                                }
                            } else {
                                document.logBreadIssue('error', errorInfo, 'Response from ' + shippingAddressEstimationUrl + ' was not of type Object');
                            }
                        }
                        catch (e) {
                            errorInfo = {
                                response: response,
                                shipping_info: shippingAddress,
                            };
                            document.logBreadIssue('error', errorInfo, e);
                        }
                    }).fail(function(error) {
                        errorInfo = {
                            shipping_info: shippingAddress,
                        };
                        document.logBreadIssue('error', errorInfo,
                            'Error code returned when calling ' + shippingAddressEstimationUrl + ', with status: ' + error.statusText);
                    });
                },

                /**
                 * Add to cart call back used when allow checkout from product page = false
                 *
                 * @param callback
                 */
                addToCart:  function(callback) {
                    document.getElementById('product-addtocart-button').click();
                }
            };

            if (buttonCss !== null && buttonCss !== '' && buttonCss != false) {
                breadConfig.customCSS = buttonCss;
            }

            if (buttonOnProduct === true) {
                breadConfig.actAsLabel = false;
            }

            if(financingInfo.enabled && financingInfo.mode.cart){
                var cartSizeFinancingId = financingInfo.id;
                var cartSizeThreshold = financingInfo.threshold;
                var itemsPriceSum = items.reduce(function(sum, item) { return sum + item.price * item.quantity; }, 0) / 100;
                breadConfig.financingProgramId = (itemsPriceSum >= cartSizeThreshold) ? cartSizeFinancingId : null;
            } else if (financingInfo.enabled && financingInfo.mode.sku){
                var productSku = "<?= /* @noEscape */ $block->getProduct()->getSku(); ?>";
                if(financingInfo.sku_limit.indexOf(productSku) !== -1){
                    breadConfig.financingProgramId = financingInfo.id;
                }
            }

            if (!document.hasCheckedConfigData) {

                var configDataUrl = '<?= /* @noEscape */ $block->getConfigDataUrl(); ?>';
                $.ajax({
                    url: configDataUrl,
                    type: 'post',
                    context: this
                }).done(function(data) {
                    document.hasCheckedConfigData = true;

                    if (data.shippingContact !== false) {
                        breadConfig.shippingContact = data.shippingContact;
                    }

                    if (data.billingContact !== false) {
                        breadConfig.billingContact = data.billingContact;
                    }

                    if (typeof bread !== 'undefined') {
                        bread.checkout(breadConfig);
                        splitPay.setupSplitPay(breadConfig, '.splitpay-clickable-button', false);
                    }
                }).fail(function(error) {
                    document.logBreadIssue('error', {},
                        'Error code returned when calling ' + configDataUrl + ', with status: ' + error.statusText);
                });

            } else {
                if (typeof bread !== 'undefined') {
                    bread.checkout(breadConfig);
                    splitPay.setupSplitPay(breadConfig, '.splitpay-clickable-button', false);
                }
            }
        };

        /**
         * Remove items fron quote after 
         * discount calculation
         */
        document.clearQuote = function() {
            var clearQuoteUrl = '<?= /* @noEscape */ $block->getClearQuoteUrl(); ?>';
            $.ajax({
                url: clearQuoteUrl
            }).fail(function(error) {
                document.logBreadIssue('error', {},
                    'Error code returned when calling ' + clearQuoteUrl + ', with status: ' + error.statusText);
            });
        };

    <?php if ($block->getProduct() != null) : ?>

        /**
         * Reconfigure Bread checkout button with updated
         * price and sku values
         */
        document.resetPriceAndSku = function(configurable) {
            if (!configurable) {
                document.configureButton(document.defaultItems);
            }
            else {
                var price = document.calculatePrice();

                if(typeof document.customOptions !== "undefined"){
                    sku = document.selectedSku + document.customOptions;
                } else {
                    sku = document.selectedSku;
                }

                if (sku != document.previousSku || price != document.previousPrice) {
                    document.previousSku                    = sku;
                    document.previousPrice                  = price;
                    document.defaultItems[0]["sku"]         = document.previousSku;
                    document.defaultItems[0]["price"]       = document.previousPrice;
                    document.configureButton(document.defaultItems);
                }
            }
        };

        /**
         * Calculate updated price based on attribute selections
         * and/or custom options
         *
         * @returns int
         */
        document.calculatePrice = function() {
            var price = 0;
            var customPrice = 0;

            if (document.priceWithOptions) {
                customPrice = document.priceWithOptions;
            }

            var selectedProductPrices = (typeof spConfig !== "undefined") && spConfig.optionPrices[document.selectedSimpleProductId];

            if (selectedProductPrices) {
                price = parseInt(Math.round(selectedProductPrices.finalPrice.amount * 100));
            }

            return Math.max(price, customPrice);
        };
        <?php endif; ?>
        document.defaultItems       = <?= /* @noEscape */ $block->getProductDataJson(); ?>;
        document.previousPrice      = document.defaultItems[0]["price"];
        document.previousSku        = document.defaultItems[0]["sku"];

        $(document).ready(function () {
            <?php if ($block->getProduct() != null) : ?>
                document.productId                      = '<?= /* @noEscape */ $block->getProduct()->getId(); ?>';
                document.baseProductSku                 = '<?= /* @noEscape */ $block->getProduct()->getSku(); ?>';
                document.selectedSku                    = '<?= /* @noEscape */ $block->getProduct()->getSku(); ?>';
                document.selectedSimpleProductId        = '<?= /* @noEscape */ $block->getProduct()->getId(); ?>';
                document.resetPriceAndSku(false);
            <?php else : ?>
                document.configureButton(document.defaultItems);
            <?php endif; ?>
        });
    });
</script>
<?php endif;?>