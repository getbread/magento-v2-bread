<?php /** @var $block Bread\BreadCheckout\Block\Product\View */ ?>
<?= /* @noEscape */ $block->getBeforeHtml(); ?>

<div id="bread-btn-cntnr">
    <div id="bread-checkout-btn" title="Bread Checkout" class="button" <?= /* @noEscape */ $block->getIsDefaultSize(); ?>>
        <?php if($block->getApiVersion() !== 'bread_2' ) :?>
        <span>
            <span><img src="<?= /* @noEscape */ $block->getViewFileUrl('Bread_BreadCheckout/bread/images/ajax-loader-small.gif'); ?>" alt="<?= /* @noEscape */ __('Bread Checkout'); ?>" /></span>
        </span>
        <?php endif; ?>
    </div>
    <div class="button-prevent" id="button-prevent">
        <span class="buy_error_tip override_tip" data-content="<?= /* @noEscape */ __('Please complete product configuration') ?>">&nbsp;</span>
    </div>
    <div class="splitpay-clickable-button" style="text-align: center;"></div>
</div>

<script type="text/x-magento-init">
    {
        "*": {
             "Bread_BreadCheckout/js/product/button": {
                "buttonId": "#bread-checkout-btn, #button-prevent",
                "requiredOptionsSelector": ".product-options-wrapper [aria-required=\"true\"]"
             }
        }
    }
</script>

<?php if($block->getApiVersion() === 'bread_2') :?> 
<script type="text/javascript">
        require(['jquery'], function($) {
        let wasSetup = false;
        document.configureButton = function (items) {          
            if (typeof window.BreadPayments !== 'undefined' || typeof window.RBCPayPlan !== 'undefined') {
                let bread_sdk = null;
                let currentCurrencyCode = "<?= /* @noEscape */ $block->getCurrentCurrencyCode(); ?>";
                let config_client = "<?= /* @noEscape */ $block->getConfigClient(); ?>";
                let itemsObject = [];
                for (var i = 0; i < items.length; i++) {
                    let item = {
                        name: items[i].name,
                        quantity: items[i].quantity,
                        shippingCost: {
                            value: 0,
                            currency: currentCurrencyCode
                        },
                        shippingDescription: '',
                        unitTax: {
                            value: 0,
                            currency: currentCurrencyCode
                        },
                        unitPrice: {
                            currency: currentCurrencyCode,
                            value: items[i].price
                        },
                        itemUrl: items[i].detailUrl
                    };

                    itemsObject.push(item);
                }
                let data = {
                    allowCheckout: false,
                    domID: 'bread-checkout-btn',
                    order: {
                        currency: currentCurrencyCode,
                        items: itemsObject,
                        subTotal: {
                            value: items[0]["price"],
                            currency: currentCurrencyCode
                        },
                        totalPrice: {
                            value: items[0]["price"],
                            currency: currentCurrencyCode
                        },
                        totalDiscounts: {
                            value: 0,
                            currency: currentCurrencyCode
                        },
                        totalShipping: {
                            value: 0,
                            currency: currentCurrencyCode
                        },
                        totalTax: {
                            value: 0,
                            currency: currentCurrencyCode
                        }
                    }
                };
                
                if (config_client === 'RBC') {
                    bread_sdk = window.RBCPayPlan;
                } else {
                    bread_sdk = window.BreadPayments;
                }

                if (!wasSetup) {
                    
                    let onApproved = function onApproved(application) {};
                    let onCheckout = function onCheckout(application) {};
                    bread_sdk.setup({
                        integrationKey: "<?= /* @noEscape */ $block->getIntegrationKey(); ?>"
                    });
                    bread_sdk.on('INSTALLMENT:APPLICATION_DECISIONED', onApproved);
                    bread_sdk.on('INSTALLMENT:APPLICATION_CHECKOUT', onCheckout);
                    
                    bread_sdk.registerPlacements([data]);
                    bread_sdk.setInitMode('manual');
                    bread_sdk.init();
                    wasSetup = true;
                } else {
                    bread_sdk.registerPlacements([data]);
                }
            } else {
                let errorInfo = {
                    err: 'err'
                };
                document.logBreadIssue('error', errorInfo, 'Instance of Bread Payments SDK does not exist');
            }
        };    
            
        <?php if ($block->getProduct() != null) : ?>

        /**
         * Reconfigure Bread checkout button with updated
         * price and sku values
         */
        document.resetPriceAndSku = function(configurable) {
            if (!configurable) {
                document.configureButton(document.defaultItems);
            }
            else {
                var price = document.calculatePrice();

                if(typeof document.customOptions !== "undefined"){
                    sku = document.selectedSku + document.customOptions;
                } else {
                    sku = document.selectedSku;
                }

                if (sku != document.previousSku || price != document.previousPrice) {
                    document.previousSku                    = sku;
                    document.previousPrice                  = price;
                    document.defaultItems[0]["sku"]         = document.previousSku;
                    document.defaultItems[0]["price"]       = document.previousPrice;
                    document.configureButton(document.defaultItems);
                }
            }
        };    
            /**
         * Calculate updated price based on attribute selections
         * and/or custom options
         *
         * @returns int
         */
        document.calculatePrice = function() {
            var price = 0;
            var customPrice = 0;

            if (document.priceWithOptions) {
                customPrice = document.priceWithOptions;
            }

            var selectedProductPrices = (typeof spConfig !== "undefined") && spConfig.optionPrices[document.selectedSimpleProductId];

            if (selectedProductPrices) {
                price = parseInt(Math.round(selectedProductPrices.finalPrice.amount * 100));
            }

            return Math.max(price, customPrice);
        };
        <?php endif; ?>
        document.defaultItems       = <?= /* @noEscape */ $block->getProductDataJson(); ?>;
        document.previousPrice      = document.defaultItems[0]["price"];
        document.previousSku        = document.defaultItems[0]["sku"];

        $(window).on('load', function() {
            <?php if ($block->getProduct() != null) : ?>
                document.productId                      = '<?= /* @noEscape */ $block->getProduct()->getId(); ?>';
                document.baseProductSku                 = '<?= /* @noEscape */ $block->getProduct()->getSku(); ?>';
                document.selectedSku                    = '<?= /* @noEscape */ $block->getProduct()->getSku(); ?>';
                document.selectedSimpleProductId        = '<?= /* @noEscape */ $block->getProduct()->getId(); ?>';
                document.resetPriceAndSku(false);
            <?php else : ?>
                document.configureButton(document.defaultItems);
            <?php endif; ?>
        });
        });
</script>
<?php endif;?>