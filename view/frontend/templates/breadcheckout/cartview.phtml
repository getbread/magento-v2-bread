<?php /** @var Bread\BreadCheckout\Block\Checkout\Overview $block */ ?>
<?= /* @noEscape */ $block->getBeforeHtml(); ?>
<div id="bread-btn-cntnr">
    <div id="bread-checkout-btn" title="Bread Checkout" class="button" <?= /* @noEscape */ $block->getIsDefaultSize(); ?>>
        <?php if ($block->getApiVersion() !== 'bread_2') : ?>
            <span>
                <span><?= /* @noEscape */ __('Bread Checkout'); ?></span>
            </span>
        <?php endif; ?>
    </div>
    <div class="button-prevent" id="button-prevent">
        <span class="buy_error_tip override_tip" data-content="<?= /* @noEscape */ $block->productTypeErrorMessage() ?>">&nbsp;</span>
    </div>
    <div class="splitpay-clickable-button" style="text-align: center;"></div>
</div>

<script type="text/javascript">
<?php if ($block->getApiVersion() === 'bread_2') : ?>
        require(['jquery','jquery/validate', 'mage/validation', '!domReady'], function ($) {
            var validateProductTypes = Boolean(<?= /* @noEscape */ $block->validateAllowedProductTypes() ?>);
            if (validateProductTypes === false) {
                var buttonPrevent = $('#button-prevent');
                buttonPrevent.css('width', '100%');
                buttonPrevent.css('height', '100%');
                buttonPrevent.show();
            }
            let wasSetup = false;
            document.configureButton = function (items) {
                if (typeof window.BreadPayments !== 'undefined' || typeof window.RBCPayPlan !== 'undefined') {
                    let bread_sdk = null;
                let config_client = "<?= /* @noEscape */ $block->getConfigClient(); ?>";
                if (config_client === 'RBC') {
                        bread_sdk = window.RBCPayPlan;
                } else {
                        bread_sdk = window.BreadPayments;
                }
                
                let currentCurrencyCode = "<?= /* @noEscape */ $block->getCurrentCurrencyCode(); ?>";
                let itemsObject = [];
                let total = 0;
                for (var i = 0; i < items.length; i++) {
                        total += items[i]['price'] * items[i]['quantity'];
                }
                <?php if(!$block->isHealthcare()) : ?>
                for (var i = 0; i < items.length; i++) {
                        let item = {
                        name: items[i]['name'],
                        quantity: items[i]['quantity'],
                        shippingCost: {
                                value: 0,
                                currency: currentCurrencyCode
                        },
                        shippingDescription: '',
                        unitTax: {
                                value: 0,
                                currency: currentCurrencyCode
                        },
                        unitPrice: {
                                currency: currentCurrencyCode,
                                value: items[i]['price']
                        },
                        itemUrl: items[i].detailUrl
                        };

                        itemsObject.push(item);
                }
                <?php endif; ?>
                let data = {
                        allowCheckout: false,
                        domID: 'bread-checkout-btn',
                        order: {
                        currency: currentCurrencyCode,
                        items: itemsObject,
                        subTotal: {
                                value: total,
                                currency: currentCurrencyCode
                        },
                        totalPrice: {
                                value: total,
                                currency: currentCurrencyCode
                        },
                        totalDiscounts: {
                                value: 0,
                                currency: currentCurrencyCode
                        },
                        totalShipping: {
                                value: 0,
                                currency: currentCurrencyCode
                        },
                        totalTax: {
                                value: 0,
                                currency: currentCurrencyCode
                        }
                        }
                };
                if (!wasSetup) {
                    let onApproved = function onApproved(application) {};
                    let onCheckout = function onCheckout(application) {};
                    bread_sdk.setup({
                        integrationKey: "<?= /* @noEscape */ $block->getIntegrationKey(); ?>"
                    });
                    bread_sdk.on('INSTALLMENT:APPLICATION_DECISIONED', onApproved);
                    bread_sdk.on('INSTALLMENT:APPLICATION_CHECKOUT', onCheckout);
                    bread_sdk.registerPlacements([data]);
                    bread_sdk.setInitMode('manual');
                    bread_sdk.init();
                    wasSetup = true;
                } else {
                    bread_sdk.registerPlacements([data]);
                }
                } else {
                    let errorInfo = {
                        err: 'err'
                    };
                    document.logBreadIssue('error', errorInfo, 'Instance of Bread Payments SDK does not exist');
                }
            };
            document.round = function(value) {
                return parseInt(Math.round(value * 100));
            };
            document.defaultItems = <?= /* @noEscape */ $block->getProductDataJson(); ?>;
            document.configureButton(document.defaultItems);
        });
<?php endif; ?>
</script>
